
# If true, then print all the properties set here when they are loaded.
# If false, they are not printed.
Security.printProperties=false

#Data Encoder (Codecs)
Security.Encoder=com.bosch.security.codecs.impl.DefaultEncoder

#Data Encryptor (Encryption/Decryption)
Security.Encryptor=com.bosch.security.crypto.impl.DataEncryptor

#Web intrusion detector.
Security.IntrusionDetector=com.bosch.security.logger.impl.DefaultIntrusionDetector

#Random number/string generator..
Security.Randomizer=com.bosch.security.random.impl.DefaultRandomizer

#Input validator..
Security.Validator=com.bosch.security.validator.impl.DefaultValidator

#===========================================================================
# Encoder
# Multiple encoding is when a single encoding format is applied multiple times. Allowing
# multiple encoding is strongly discouraged.
Encoder.AllowMultipleEncoding=false

# Mixed encoding is when multiple different encoding formats are applied, or when
# multiple formats are nested. Allowing multiple encoding is strongly discouraged.
Encoder.AllowMixedEncoding=false

# The default list of codecs to apply when canonicalizing untrusted data. 
Encoder.DefaultCodecList=HTMLEntityCodec,PercentCodec,JavaScriptCodec

# Ensure no CRLF injection into logs for forging records
Encoder.LogEncodingRequired=true

#===========================================================================
# Encryption

# Provides the default JCE provider that ESAPI will "prefer" for its symmetric
# encryption and hashing. If left unset, ESAPI will just use your Java VM's current
# preferred JCE provider, which is generally set in the file
# "$JAVA_HOME/jre/lib/security/java.security".
Encryptor.PreferredJCEProvider=BC

# AES is the most widely used and strongest encryption algorithm. This
# should agree with your Encryptor.CipherTransformation property.
Encryptor.EncryptionAlgorithm=AES
Encryptor.CipherTransformation=AES/GCM/NoPadding

# PasswordBasedEncryption(PBE) attributes for the sensitive data stored in the property files. 
Encryptor.PBEEncryptionAlgorithm=PBEWITHSHA256AND128BITAES-CBC-BC
Encryptor.PBEEncryptionJCEProvider=BC

# Comma-separated list of cipher modes that provide *BOTH*
# confidentiality *AND* message authenticity. 
Encryptor.cipher_modes.combined_modes=GCM

# Additional cipher modes allowed for  encryption. 
Encryptor.cipher_modes.additional_allowed=CBC

# 128-bit is almost always sufficient and appears to be more resistant to
# related key attacks than is 256-bit AES. Use '_' to use default key size
# for cipher algorithms (where it makes sense because the algorithm supports
# a variable key size). Key length must agree to what's provided as the
# cipher transformation
Encryptor.EncryptionKeyLength=256

# If we are using CBC mode by default, it requires an initialization vector (IV).
# (All cipher modes except ECB require an IV.) 
# Valid values:		random|fixed|
Encryptor.ChooseIVMethod=random

# If you choose to use a fixed IV, then you must place a fixed IV here that
# is known to all others who are sharing your secret key. The format should
# be a hex string that is the same length as the cipher block size for the
# cipher algorithm that you are using. The following is an example for AES
# from an AES test vector for AES-128/CBC as described in:
# NIST Special Publication 800-38A (2001 Edition)
# "Recommendation for Block Cipher Modes of Operation".
# (Note that the block size for AES is 16 bytes == 128 bits.)
#
Encryptor.fixedIV=0x000102030405060708090a0b0c0d0e0f

# Whether or not CipherText should use a message authentication code (MAC) with it.
# This prevents an adversary from altering the IV as well as allowing a more
# fool-proof way of determining the decryption failed because of an incorrect
# key being supplied. This refers to the "separate" MAC calculated and stored
# in CipherText, not part of any MAC that is calculated as a result of a
# "combined mode" cipher mode.
# If you are using ESAPI with a FIPS 140-2 cryptographic module, you *must* also
# set this property to false.
Encryptor.CipherText.useMAC=false

# Whether or not the PlainText object may be overwritten and then marked
# eligible for garbage collection. If not set, this is still treated as 'true'.
Encryptor.PlainText.overwrite=true

#HashAlgorithms and other attributes.
Encryptor.HashAlgorithm=SHA-256
Encryptor.HashIterations=1024
Encryptor.RandomAlgorithm=SHA1PRNG
Encryptor.CharacterEncoding=UTF-8
Encryptor.SaltLength=23

# Max allowed cipher text size limit [in bytes] ~ 1KB
Encryptor.MaxAllowedCipherTextSize=2048

#===========================================================================
# Validation
#
# The Validator works on regular expressions with defined names. You can define names
# either here, or you may define application specific patterns in a separate file defined below.
# This allows enterprises to specify both organizational standards as well as application specific
# validation rules.
#
Validator.ConfigurationFile=validation.properties

XSS.ConfigurationFile=xss_encoded.properties
XSS.Pattern.encoded=true